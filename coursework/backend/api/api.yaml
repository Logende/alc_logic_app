openapi: 3.0.3
info:
  title: ALC Logic App API
  version: '0.1'
servers:
  - url: http://localhost:5001
paths:
  /tasks:
    get:
      summary: Get all tasks
      operationId: getTasks
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
  /user/{username}:
    get:
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: Requires either user with name that does not yet exist or the correct user password hash
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name of user
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        default:
          description: successful operation
components:
  schemas:
    UserProfile:
      type: object
      properties:
        name:
          type: string
          example: logende
        password_hash:
          type: string
          example: todo
        # Dictionary with string as key and TaskStatistics as value
        tasks_statistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskStatistics'
    TaskStatistics:
      type: object
      properties:
        attempts:
          type: integer
          format: int32
          example: 5
        successes:
          type: integer
          format: int32
          example: 3
        total_time_needed:
          type: number
          format: double
          example: 104.01
    Task:
      type: object
      properties:
        concept:
          type: string
          example: 'A'
        satisfiable:
          type: boolean
          example: true
        complexity:
          type: integer
          format: int32
          example: 1
    TaskList:
      type: array
      items:
        $ref: '#/components/schemas/Task'
